'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ScatterChart, Scatter } from 'recharts';
import CommentSystem from '@/components/CommentSystem';

export default function ShortCutDemoPage() {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [selectedCar, setSelectedCar] = useState(1);
  const [alertsCount, setAlertsCount] = useState(0);

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è G-G –¥–∏–∞–≥—Ä–∞–º–º—ã
  const ggData = [
    { x: 0, y: 0 }, { x: 0.2, y: 0.8 }, { x: 0.5, y: 0.6 }, { x: 0.8, y: 0.3 },
    { x: 1.0, y: 0 }, { x: 0.8, y: -0.5 }, { x: 0.5, y: -0.8 }, { x: 0.2, y: -1.0 },
    { x: 0, y: -1.2 }, { x: -0.2, y: -1.0 }, { x: -0.5, y: -0.8 }, { x: -0.8, y: -0.5 },
    { x: -1.0, y: 0 }, { x: -0.8, y: 0.3 }, { x: -0.5, y: 0.6 }, { x: -0.2, y: 0.8 }
  ];

  // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
  const [telemetryData, setTelemetryData] = useState([
    { time: 0, rpm: 6500, temp: 85, speed: 120, gLateral: 0.8, gLong: -0.3 },
    { time: 1, rpm: 7200, temp: 87, speed: 125, gLateral: 1.2, gLong: 0.5 },
    { time: 2, rpm: 7800, temp: 89, speed: 135, gLateral: -0.9, gLong: -1.1 },
    { time: 3, rpm: 7500, temp: 91, speed: 140, gLateral: 1.5, gLong: 0.2 },
    { time: 4, rpm: 6800, temp: 88, speed: 130, gLateral: -1.3, gLong: -0.8 }
  ]);

  // –§–ª–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π Shortcut
  const [fleetData, setFleetData] = useState([
    { id: 1, driver: "–ò–≤–∞–Ω–æ–≤ –ê.", position: 1, lapTime: "1:23.456", status: "ok", rpm: 7200, temp: 85, gForce: 1.2 },
    { id: 7, driver: "–ü–µ—Ç—Ä–æ–≤ –í.", position: 2, lapTime: "1:23.892", status: "warning", rpm: 7850, temp: 92, gForce: 1.8 },
    { id: 15, driver: "–°–∏–¥–æ—Ä–æ–≤ –°.", position: 3, lapTime: "1:24.123", status: "ok", rpm: 7100, temp: 87, gForce: 1.1 },
    { id: 23, driver: "–ö–æ–∑–ª–æ–≤ –î.", position: 4, lapTime: "1:24.567", status: "critical", rpm: 8200, temp: 98, gForce: 2.1 },
    { id: 42, driver: "–ú–æ—Ä–æ–∑–æ–≤ –ö.", position: 5, lapTime: "1:24.789", status: "ok", rpm: 6900, temp: 86, gForce: 0.9 }
  ]);

  // –°–∏–º—É–ª—è—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTime(new Date());
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
      setTelemetryData(prev => {
        const newData = [...prev];
        const lastTime = newData[newData.length - 1].time;
        const rpm = 6000 + Math.random() * 2000;
        const temp = 80 + Math.random() * 20;
        const speed = 100 + Math.random() * 50;
        const gLateral = (Math.random() - 0.5) * 3;
        const gLong = (Math.random() - 0.5) * 2.5;
        
        newData.push({
          time: lastTime + 1,
          rpm: Math.round(rpm),
          temp: Math.round(temp),
          speed: Math.round(speed),
          gLateral: Math.round(gLateral * 10) / 10,
          gLong: Math.round(gLong * 10) / 10
        });
        
        return newData.slice(-20); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç–æ—á–µ–∫
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–æ—Ç
      setFleetData(prev => prev.map(car => ({
        ...car,
        rpm: 6000 + Math.random() * 2500,
        temp: 80 + Math.random() * 25,
        gForce: Math.random() * 2.5,
        lapTime: `1:${23 + Math.floor(Math.random() * 3)}.${Math.floor(Math.random() * 999).toString().padStart(3, '0')}`
      })));

      // –°–∏–º—É–ª—è—Ü–∏—è –∞–ª–µ—Ä—Ç–æ–≤
      if (Math.random() < 0.1) {
        setAlertsCount(prev => prev + 1);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'ok': return 'text-green-600 bg-green-50 border-green-200';
      case 'warning': return 'text-yellow-600 bg-yellow-50 border-yellow-200';
      case 'critical': return 'text-red-600 bg-red-50 border-red-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'ok': return '‚úÖ';
      case 'warning': return '‚ö†Ô∏è';
      case 'critical': return 'üö®';
      default: return '‚ùì';
    }
  };

  return (
    <div className="min-h-screen bg-white">
      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <nav className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="max-w-7xl mx-auto flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <div className="w-8 h-8 bg-red-600 rounded-sm"></div>
            <span className="text-xl font-bold text-gray-900">Virtual Pitwall Team</span>
          </div>
          <div className="flex space-x-6">
            <Link href="/" className="text-gray-600 hover:text-red-600">Virtual Pitwall</Link>
            <a href="/features" className="text-gray-600 hover:text-red-600">Features</a>
            <a href="/shortcut" className="text-gray-600 hover:text-red-600">DK Racing</a>
            <a href="/shortcut/demo" className="text-red-600 font-medium">Team Demo</a>
            <a href="/shortcut/dk" className="text-gray-600 hover:text-red-600">DK Demo</a>
            <a href="/shortcut/benefits" className="text-gray-600 hover:text-red-600">Benefits</a>
            <a href="/dev" className="text-gray-500 hover:text-gray-700 flex items-center gap-1" title="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å)">
              üîí Developer
            </a>
          </div>
        </div>
      </nav>

      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ */}
      <section className="bg-white py-8 border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                Virtual Pitwall <span className="text-red-600">Team</span>
              </h1>
              <p className="text-gray-600">–î–µ–º–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 5 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–æ–º–∞–Ω–¥—ã</p>
            </div>
            <div className="text-right">
              <div className="text-2xl font-mono text-gray-900">
                {currentTime.toLocaleTimeString()}
              </div>
              <div className="text-sm text-gray-500">Moscow Raceway</div>
            </div>
          </div>
        </div>
      </section>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
      <section className="py-6 bg-gray-50">
        <div className="max-w-7xl mx-auto px-6">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div className="bg-white rounded-lg border border-gray-200 p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–∞ —Ç—Ä–∞—Å—Å–µ</p>
                  <p className="text-2xl font-bold text-gray-900">{fleetData.length}</p>
                </div>
                <div className="text-3xl">üèéÔ∏è</div>
              </div>
            </div>
            
            <div className="bg-white rounded-lg border border-gray-200 p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã</p>
                  <p className="text-2xl font-bold text-red-600">{alertsCount}</p>
                </div>
                <div className="text-3xl">üö®</div>
              </div>
            </div>
            
            <div className="bg-white rounded-lg border border-gray-200 p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–õ—É—á—à–µ–µ –≤—Ä–µ–º—è</p>
                  <p className="text-2xl font-bold text-green-600">1:23.456</p>
                </div>
                <div className="text-3xl">‚è±Ô∏è</div>
              </div>
            </div>
            
            <div className="bg-white rounded-lg border border-gray-200 p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">–ö–æ–Ω—Ç—Ä–æ–ª—å –æ–±–æ—Ä–æ—Ç–æ–≤</p>
                  <p className="text-2xl font-bold text-blue-600">100%</p>
                </div>
                <div className="text-3xl">üìä</div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <section className="py-8">
        <div className="max-w-7xl mx-auto px-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            
            {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –§–ª–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π */}
            <div className="lg:col-span-1">
              <h2 className="text-xl font-bold text-gray-900 mb-4">üèÅ –§–ª–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π Shortcut</h2>
              <div className="space-y-3">
                {fleetData.map((car) => (
                  <div 
                    key={car.id}
                    className={`p-4 rounded-lg border cursor-pointer transition-all ${
                      selectedCar === car.id 
                        ? 'border-red-500 bg-red-50' 
                        : 'border-gray-200 bg-white hover:border-gray-300'
                    }`}
                    onClick={() => setSelectedCar(car.id)}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-3">
                        <div className="w-8 h-8 bg-red-600 rounded-full flex items-center justify-center text-white font-bold text-sm">
                          {car.id}
                        </div>
                        <div>
                          <p className="font-medium text-gray-900">{car.driver}</p>
                          <p className="text-sm text-gray-500">–ü–æ–∑. {car.position}</p>
                        </div>
                      </div>
                      <div className={`px-2 py-1 rounded-full border text-xs font-medium ${getStatusColor(car.status)}`}>
                        {getStatusIcon(car.status)} {car.status.toUpperCase()}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <span className="text-gray-500">–í—Ä–µ–º—è: </span>
                        <span className="font-mono">{car.lapTime}</span>
                      </div>
                      <div>
                        <span className="text-gray-500">RPM: </span>
                        <span className={`font-mono ${car.rpm > 8000 ? 'text-red-600 font-bold' : 'text-gray-900'}`}>
                          {Math.round(car.rpm)}
                        </span>
                      </div>
                      <div>
                        <span className="text-gray-500">–¢–µ–º–ø: </span>
                        <span className={`font-mono ${car.temp > 95 ? 'text-red-600 font-bold' : 'text-gray-900'}`}>
                          {Math.round(car.temp)}¬∞C
                        </span>
                      </div>
                      <div>
                        <span className="text-gray-500">G-—Å–∏–ª—ã: </span>
                        <span className={`font-mono ${car.gForce > 2.0 ? 'text-red-600 font-bold' : 'text-gray-900'}`}>
                          {car.gForce.toFixed(1)}G
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
              
              {/* –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ */}
              <div className="mt-6">
                <h3 className="text-lg font-bold text-gray-900 mb-3">üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã</h3>
                <div className="space-y-2">
                  <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                    <p className="text-sm font-medium text-red-800">–ê–≤—Ç–æ #23 - –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±–æ—Ä–æ—Ç–æ–≤</p>
                    <p className="text-xs text-red-600">8200 –æ–±/–º–∏–Ω &gt; –ª–∏–º–∏—Ç 8000</p>
                  </div>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                    <p className="text-sm font-medium text-yellow-800">–ê–≤—Ç–æ #7 - –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</p>
                    <p className="text-xs text-yellow-600">92¬∞C –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É</p>
                  </div>
                </div>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ì—Ä–∞—Ñ–∏–∫–∏ */}
            <div className="lg:col-span-2 space-y-6">
              
              {/* G-G –î–∏–∞–≥—Ä–∞–º–º–∞ */}
              <div className="bg-white rounded-lg border border-gray-200 p-6">
                                  <h3 className="text-lg font-bold text-gray-900 mb-4">
                    üìä G-G –¥–∏–∞–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è #{selectedCar}
                  </h3>
                <p className="text-sm text-gray-600 mb-4">
                  –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–µ–ª—å–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∫–∞–∫ –≤ Formula 1
                </p>
                
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <ScatterChart data={ggData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis 
                        type="number" 
                        dataKey="x" 
                        domain={[-1.5, 1.5]}
                        axisLine={true}
                        tickLine={true}
                        tick={{ fontSize: 12 }}
                        label={{ value: '–ë–æ–∫–æ–≤—ã–µ G-—Å–∏–ª—ã', position: 'insideBottom', offset: -5 }}
                      />
                      <YAxis 
                        type="number" 
                        dataKey="y" 
                        domain={[-1.5, 1.5]}
                        axisLine={true}
                        tickLine={true}
                        tick={{ fontSize: 12 }}
                        label={{ value: '–ü—Ä–æ–¥–æ–ª—å–Ω—ã–µ G-—Å–∏–ª—ã', angle: -90, position: 'insideLeft' }}
                      />
                      <Tooltip 
                        formatter={(value, name) => [
                          `${typeof value === 'number' ? value.toFixed(2) : value}G`, 
                          name === 'x' ? '–ë–æ–∫–æ–≤—ã–µ' : '–ü—Ä–æ–¥–æ–ª—å–Ω—ã–µ'
                        ]}
                      />
                      <Scatter dataKey="y" fill="#dc2626" />
                      
                      {/* –õ–∏–º–∏—Ç–Ω—ã–µ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ */}
                      <defs>
                        <pattern id="limit-circle" patternUnits="userSpaceOnUse" width="100%" height="100%">
                          <circle cx="50%" cy="50%" r="40%" stroke="#ef4444" strokeWidth="2" fill="none" strokeDasharray="5,5" />
                        </pattern>
                      </defs>
                    </ScatterChart>
                  </ResponsiveContainer>
                </div>
                
                <div className="mt-4 flex justify-between text-sm text-gray-600">
                  <span>üî¥ –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ G-—Å–∏–ª—ã</span>
                  <span>‚úÖ –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–æ—Ä–º–µ</span>
                </div>
              </div>

              {/* –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                
                {/* –û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è */}
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-4">
                    ‚öôÔ∏è –û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è (RPM)
                  </h3>
                  <div className="h-40">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={telemetryData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="time" tick={{ fontSize: 12 }} />
                        <YAxis domain={[5000, 8500]} tick={{ fontSize: 12 }} />
                        <Tooltip formatter={(value) => [`${value} –æ–±/–º–∏–Ω`, 'RPM']} />
                        <Line 
                          type="monotone" 
                          dataKey="rpm" 
                          stroke="#dc2626" 
                          strokeWidth={2}
                          dot={{ fill: '#dc2626', strokeWidth: 2, r: 3 }}
                        />
                        {/* –õ–∏–º–∏—Ç–Ω–∞—è –ª–∏–Ω–∏—è */}
                        <Line 
                          type="monotone" 
                          dataKey={() => 8000} 
                          stroke="#ef4444" 
                          strokeWidth={2}
                          strokeDasharray="5,5"
                          dot={false}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    üî¥ –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è: –ª–∏–º–∏—Ç 8000 –æ–±/–º–∏–Ω
                  </p>
                </div>

                {/* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ */}
                <div className="bg-white rounded-lg border border-gray-200 p-6">
                  <h3 className="text-lg font-bold text-gray-900 mb-4">
                    üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –û–ñ
                  </h3>
                  <div className="h-40">
                    <ResponsiveContainer width="100%" height="100%">
                      <LineChart data={telemetryData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="time" tick={{ fontSize: 12 }} />
                        <YAxis domain={[70, 110]} tick={{ fontSize: 12 }} />
                        <Tooltip formatter={(value) => [`${value}¬∞C`, '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞']} />
                        <Line 
                          type="monotone" 
                          dataKey="temp" 
                          stroke="#f59e0b" 
                          strokeWidth={2}
                          dot={{ fill: '#f59e0b', strokeWidth: 2, r: 3 }}
                        />
                        {/* –õ–∏–º–∏—Ç–Ω–∞—è –ª–∏–Ω–∏—è */}
                        <Line 
                          type="monotone" 
                          dataKey={() => 100} 
                          stroke="#ef4444" 
                          strokeWidth={2}
                          strokeDasharray="5,5"
                          dot={false}
                        />
                      </LineChart>
                    </ResponsiveContainer>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    üî¥ –ö—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≥—Ä–µ–≤ 100¬∞C
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Race Control dashboard */}
      <section className="py-8 bg-gray-50">
        <div className="max-w-7xl mx-auto px-6">
          <h2 className="text-2xl font-bold text-gray-900 text-center mb-8">
            Race Control dashboard –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-white text-2xl">üö®</span>
                </div>
                                 <h3 className="text-lg font-bold text-gray-900 mb-2">–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
                 <p className="text-sm text-gray-600 mb-4">
                   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–≤–∞—Ä–∏–π–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —Å–ª—É–∂–±–µ
                 </p>
                 <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                   <p className="text-sm font-medium text-green-800">‚úÖ –í—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º</p>
                   <p className="text-xs text-green-600">Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ 24/7</p>
                 </div>
              </div>
            </div>

            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-white text-2xl">üìä</span>
                </div>
                                 <h3 className="text-lg font-bold text-gray-900 mb-2">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                 <p className="text-sm text-gray-600 mb-4">
                   –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —É—Ä–æ–≤–Ω—è Formula 1 –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                 </p>
                 <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                   <p className="text-sm font-medium text-blue-800">üìà –£–ª—É—á—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 2-3%</p>
                   <p className="text-xs text-blue-600">–ß–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</p>
                 </div>
              </div>
            </div>

            <div className="bg-white rounded-lg border border-gray-200 p-6">
              <div className="text-center">
                <div className="w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-white text-2xl">üí∞</span>
                </div>
                <h3 className="text-lg font-bold text-gray-900 mb-2">–≠–∫–æ–Ω–æ–º–∏—è –¥–ª—è ShortCut</h3>
                <p className="text-sm text-gray-600 mb-4">
                  –ö–æ–Ω—Ç—Ä–æ–ª—å –∏–∑–Ω–æ—Å–∞ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª–æ–º–æ–∫ —Ñ–ª–æ—Ç–∞
                </p>
                <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                  <p className="text-sm font-medium text-green-800">üíµ ‚ÇΩ2,100,000 —ç–∫–æ–Ω–æ–º–∏–∏/–≥–æ–¥</p>
                  <p className="text-xs text-green-600">–î–ª—è —Ñ–ª–æ—Ç–∞ 100 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* CTA */}
      <section className="py-12 bg-red-600 text-white">
        <div className="max-w-4xl mx-auto text-center px-6">
          <h2 className="text-3xl font-bold mb-4">
            –í–ø–µ—á–∞—Ç–ª–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–∏—Å—Ç–µ–º—ã?
          </h2>
          <p className="text-lg mb-8 text-red-100">
            –≠—Ç–æ –ª–∏—à—å –º–∞–ª–∞—è —á–∞—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ ShortCut
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <a href="/shortcut/benefits" className="bg-white text-red-600 px-8 py-3 rounded-lg font-medium hover:bg-red-50">
              üí∞ –ü–æ—Å—á–∏—Ç–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—é
            </a>
            <a href="/shortcut" className="border border-white px-8 py-3 rounded-lg font-medium hover:bg-red-500">
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±–∑–æ—Ä—É
            </a>
          </div>
        </div>
      </section>

      {/* Comment System */}
      <CommentSystem pageId="demo" pageName="Team Demo - –î–µ–º–æ –¥–ª—è –∫–æ–º–∞–Ω–¥" />
    </div>
  );
} 