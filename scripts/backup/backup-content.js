const fs = require('fs');
const path = require('path');

const BACKUP_DIR = path.join(__dirname, '../../backups');

function createTimestamp() {
  const now = new Date();
  return now.toISOString().replace(/[:.]/g, '-').slice(0, 19);
}

function ensureBackupDir() {
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }
}

function backupContent() {
  ensureBackupDir();
  
  const timestamp = createTimestamp();
  const backupName = `content-backup-${timestamp}`;
  const backupPath = path.join(BACKUP_DIR, backupName);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–∞
    fs.mkdirSync(backupPath, { recursive: true });
    
    // –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    const docsPath = path.join(__dirname, '../../docs');
    if (fs.existsSync(docsPath)) {
      copyDirectory(docsPath, path.join(backupPath, 'docs'));
      console.log('‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞');
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º src/app (—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    const srcPath = path.join(__dirname, '../../src/app');
    if (fs.existsSync(srcPath)) {
      copyDirectory(srcPath, path.join(backupPath, 'src-app'));
      console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
    const publicPath = path.join(__dirname, '../../public');
    if (fs.existsSync(publicPath)) {
      copyDirectory(publicPath, path.join(backupPath, 'public'));
      console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    // –°–æ–∑–¥–∞–µ–º manifest —Ñ–∞–π–ª
    const manifest = {
      timestamp: new Date().toISOString(),
      type: 'content-backup',
      includes: ['docs', 'src/app', 'public'],
      size: getDirectorySize(backupPath)
    };
    
    fs.writeFileSync(
      path.join(backupPath, 'manifest.json'), 
      JSON.stringify(manifest, null, 2)
    );
    
    console.log(`üéâ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupName}`);
    console.log(`üìÅ –†–∞–∑–º–µ—Ä: ${formatBytes(manifest.size)}`);
    console.log(`üìç –ü—É—Ç—å: ${backupPath}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞:', error.message);
    process.exit(1);
  }
}

function copyDirectory(src, dest) {
  if (!fs.existsSync(dest)) {
    fs.mkdirSync(dest, { recursive: true });
  }
  
  const entries = fs.readdirSync(src, { withFileTypes: true });
  
  for (const entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);
    
    if (entry.isDirectory()) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º node_modules –∏ .next
      if (entry.name === 'node_modules' || entry.name === '.next') {
        continue;
      }
      copyDirectory(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

function getDirectorySize(dirPath) {
  let size = 0;
  
  function calculateSize(dir) {
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      
      if (entry.isDirectory()) {
        calculateSize(fullPath);
      } else {
        size += fs.statSync(fullPath).size;
      }
    }
  }
  
  calculateSize(dirPath);
  return size;
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
  backupContent();
}

module.exports = { backupContent }; 